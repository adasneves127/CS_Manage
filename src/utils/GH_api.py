import requests
import dotenv
import subprocess
from enum import Enum
from typing import List
import os
import json
from src.utils.containers import User

dotenv.load_dotenv()
HEADERS = {
    "Authorization": f"bearer {os.environ.get('gh_token')}",
    "X-GitHub-Api-Version": "2022-11-28",
    "Accept": "application/vnd.github+json"
}


class IssueTypes(Enum):
    BUG = 'bug'
    DOCS = 'documentation'
    ENHANCE = 'enhancement'
    QUESTION = 'question'


def get_api_repo():
    return os.environ.get('gh_repo')

    # proc = subprocess.Popen(['/bin/git', 'remote', 'get-url', 'origin'],
    #                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    # output = proc.stdout.read().decode()
    # proc.communicate()
    # if proc.returncode != 0:
    #     raise Exception("Could not get URL")

    # path = output.split('.com')[1][1:]
    # path = path.split('.git')[0]
    # return path


def create_issue(title, body, labels: List[IssueTypes]):
    if os.environ.get('gh_token') is None:
        return "No Auth Key Found!"
    repo_path = get_api_repo()
    endpoint = f"https://api.github.com/repos/{repo_path}/issues"
    req = requests.post(endpoint, json={
        "title": title,
        "body": body,
        "labels": [x.value for x in labels]
    }, headers=HEADERS)
    # print(json.dumps(req.json(), indent=4))
    return req.status_code == 201


def create_feature_request(title, description, user: User):
    title = f"[FEATURE] {title}"
    description = f"Submitted by: {user.full_name}\n{description}"
    disclaimer = "This was generated by a user-submitted feature request."
    description += f"\n### {disclaimer}\n"
    return create_issue(title, description, [IssueTypes.ENHANCE])


def create_bug_issue(title, description, user: User):
    title = f"[BUG] {title}"
    description = f"Submitted by: {user.full_name}\n{description}"
    description = f"{description}\nSystem Output: {get_journal()}"
    disclaimer = "This report was generated by a user-submitted bug report."
    description += f"\n ### {disclaimer}\n"
    return create_issue(title, description, [IssueTypes.BUG])


def get_journal():
    proc = subprocess.Popen(['journalctl', '-u', 'Management.service'],
                            stdout=subprocess.PIPE)
    output = proc.stdout.read().decode()
    trimmed_output = []
    for line in output.split('\n'):
        if "[ERROR]" in line:
            continue
        if "[INFO]" in line:
            continue
        if "[CRITICAL]" in line:
            continue
        if "systemd" in line:
            continue
        if "-- Boot" in line:
            continue
        trimmed_output.append(line)
    return '\n'.join(trimmed_output[-50:])
